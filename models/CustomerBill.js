// models/CustomerBill.js - UPDATED: Bills generated by affiliates with item-level discounts
const mongoose = require('mongoose');

const customerBillSchema = new mongoose.Schema({
  // Bill identification
  billNumber: {
    type: String,
    required: true,
    unique: true,
    index: true
  },
  
  // Affiliate who generated the bill
  affiliateId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  
  // Customer details
  customerPhoneNumber: {
    type: String,
    required: true,
    trim: true,
    index: true
  },
  
  customerName: {
    type: String,
    trim: true,
    default: ''
  },
  
  // UPDATED: Bill items with individual discounts
  items: [{
    itemName: {
      type: String,
      required: true,
      trim: true
    },
    quantity: {
      type: Number,
      required: true,
      min: 0.01
    },
    unitPrice: {
      type: Number,
      required: true,
      min: 0
    },
    // NEW: Item-level discount
    discount: {
      type: Number,
      default: 0,
      min: 0
    },
    totalPrice: {
      type: Number,
      required: true,
      min: 0
    },
    // Reference to inventory item (if inventory managed)
    inventoryItemId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Inventory'
    }
  }],
  
  // Bill totals
  subtotal: {
    type: Number,
    required: true,
    min: 0
  },
  
  // UPDATED: Additional discount (separate from item discounts)
  discountAmount: {
    type: Number,
    default: 0,
    min: 0
  },
  
  // NEW: Total item discounts (sum of all item-level discounts)
  totalItemDiscounts: {
    type: Number,
    default: 0,
    min: 0
  },
  
  totalAmount: {
    type: Number,
    required: true,
    min: 0
  },
  
  // Additional details
  remarks: {
    type: String,
    trim: true,
    default: ''
  },
  
  // Bill status
  status: {
    type: String,
    enum: ['draft', 'sent', 'paid', 'cancelled'],
    default: 'draft'
  },
  
  // WhatsApp sending status
  whatsappSent: {
    type: Boolean,
    default: false
  },
  
  whatsappSentAt: Date,
  
  // PDF details
  pdfPath: {
    type: String,
    default: ''
  },
  
  // Payment details
  paymentMethod: {
    type: String,
    enum: ['cash', 'card', 'upi', 'bank_transfer', 'pending'],
    default: 'pending'
  },
  
  paidAt: Date,
  
  billDate: {
    type: Date,
    default: Date.now,
    index: true
  }
}, {
  timestamps: true
});

// Compound indexes for efficient queries
customerBillSchema.index({ affiliateId: 1, billDate: -1 });
customerBillSchema.index({ customerPhoneNumber: 1, billDate: -1 });
customerBillSchema.index({ affiliateId: 1, status: 1 });

// UPDATED: Pre-save middleware to generate bill number and calculate totals
customerBillSchema.pre('save', async function(next) {
  if (this.isNew && !this.billNumber) {
    const date = new Date();
    const dateStr = date.getFullYear().toString() +
                   (date.getMonth() + 1).toString().padStart(2, '0') +
                   date.getDate().toString().padStart(2, '0');
    
    // Find the last bill number for today
    const lastBill = await this.constructor.findOne({
      billNumber: new RegExp(`^BILL${dateStr}`)
    }).sort({ billNumber: -1 });
    
    let sequence = 1;
    if (lastBill) {
      const lastSequence = parseInt(lastBill.billNumber.slice(-4));
      sequence = lastSequence + 1;
    }
    
    this.billNumber = `BILL${dateStr}${sequence.toString().padStart(4, '0')}`;
  }
  
  // UPDATED: Calculate totals with item-level discounts
  let itemSubtotal = 0;
  let totalItemDiscounts = 0;
  
  this.items.forEach(item => {
    const itemGross = item.quantity * item.unitPrice;
    const itemDiscount = item.discount || 0;
    item.totalPrice = Math.max(0, itemGross - itemDiscount);
    
    itemSubtotal += itemGross;
    totalItemDiscounts += itemDiscount;
  });
  
  this.subtotal = itemSubtotal;
  this.totalItemDiscounts = totalItemDiscounts;
  
  // Final total = (subtotal - item discounts - additional discount)
  this.totalAmount = Math.max(0, this.subtotal - this.totalItemDiscounts - (this.discountAmount || 0));
  
  next();
});

// Instance methods
customerBillSchema.methods.generatePDF = async function() {
  // This would integrate with a PDF generation service
  // For now, return a placeholder path
  const pdfFileName = `${this.billNumber}.pdf`;
  this.pdfPath = `/bills/pdfs/${pdfFileName}`;
  return this.pdfPath;
};

customerBillSchema.methods.sendWhatsApp = async function() {
  // This would integrate with WhatsApp Business API
  // For now, mark as sent
  this.whatsappSent = true;
  this.whatsappSentAt = new Date();
  return this.save();
};

// UPDATED: Get detailed bill breakdown
customerBillSchema.methods.getBillBreakdown = function() {
  const breakdown = {
    items: this.items.map(item => ({
      name: item.itemName,
      quantity: item.quantity,
      unitPrice: item.unitPrice,
      grossAmount: item.quantity * item.unitPrice,
      itemDiscount: item.discount || 0,
      netAmount: item.totalPrice
    })),
    subtotal: this.subtotal,
    totalItemDiscounts: this.totalItemDiscounts,
    additionalDiscount: this.discountAmount || 0,
    totalDiscounts: this.totalItemDiscounts + (this.discountAmount || 0),
    finalTotal: this.totalAmount
  };
  
  return breakdown;
};

// Static methods
customerBillSchema.statics.getAffiliateSales = function(affiliateId, startDate, endDate) {
  const matchQuery = { 
    affiliateId: affiliateId,
    status: { $ne: 'cancelled' }
  };
  
  if (startDate && endDate) {
    matchQuery.billDate = {
      $gte: new Date(startDate),
      $lte: new Date(endDate)
    };
  }
  
  return this.aggregate([
    { $match: matchQuery },
    {
      $group: {
        _id: null,
        totalBills: { $sum: 1 },
        totalRevenue: { $sum: '$totalAmount' },
        totalItemDiscounts: { $sum: '$totalItemDiscounts' },
        totalAdditionalDiscounts: { $sum: '$discountAmount' },
        totalDiscounts: { $sum: { $add: ['$totalItemDiscounts', '$discountAmount'] } }
      }
    }
  ]);
};

customerBillSchema.statics.getCustomerBills = function(phoneNumber) {
  return this.find({
    customerPhoneNumber: phoneNumber,
    status: { $ne: 'cancelled' }
  })
  .populate('affiliateId', 'name affiliateDetails.organizationName')
  .sort({ billDate: -1 });
};

// NEW: Get discount analysis for affiliate
customerBillSchema.statics.getDiscountAnalysis = function(affiliateId, startDate, endDate) {
  const matchQuery = { 
    affiliateId: affiliateId,
    status: { $ne: 'cancelled' }
  };
  
  if (startDate && endDate) {
    matchQuery.billDate = {
      $gte: new Date(startDate),
      $lte: new Date(endDate)
    };
  }
  
  return this.aggregate([
    { $match: matchQuery },
    { $unwind: '$items' },
    {
      $group: {
        _id: '$items.itemName',
        totalQuantitySold: { $sum: '$items.quantity' },
        totalGrossRevenue: { $sum: { $multiply: ['$items.quantity', '$items.unitPrice'] } },
        totalItemDiscounts: { $sum: '$items.discount' },
        averageDiscount: { $avg: '$items.discount' },
        billCount: { $sum: 1 }
      }
    },
    { $sort: { totalGrossRevenue: -1 } }
  ]);
};

const CustomerBill = mongoose.model('CustomerBill', customerBillSchema);

module.exports = CustomerBill;